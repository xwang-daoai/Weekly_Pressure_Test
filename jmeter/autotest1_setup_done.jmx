<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="config_path" elementType="Argument">
            <stringProp name="Argument.name">config_path</stringProp>
            <stringProp name="Argument.value">C:\Users\daoai\Desktop\dw_pressure_test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login request and get token">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/auth/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">autotest1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">robotics</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract token">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

def body = prev.getResponseData()       // byte[]
def json = new JsonSlurper().parse(body)

def t = json.token ?: json.access_token ?: (json.data ? json.data.token : null)
if (t) {
    // 同时写入变量和属性（变量给本线程调试用，属性跨线程组可见）
    vars.put(&apos;token&apos;, t)
    props.put(&apos;token&apos;, t)
    log.info(&apos;saved token len=&apos; + t.length())
} else {
    log.error(&apos;Login did not return a token, response=&apos; + prev.getResponseDataAsString())
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /workspaces uid">
          <stringProp name="HTTPSampler.path">/workspaces</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

final String TARGET_NAME = &apos;Xubin_test&apos;

// 解析响应（你的响应是顶层数组）
def json = new JsonSlurper().parse(prev.getResponseData())
// 允许后端有时返回对象包一层
List workspaces = (json instanceof List) ? json
                  : (json?.items instanceof List ? json.items
                  : (json?.workspaces instanceof List ? json.workspaces
                  : (json?.data instanceof List ? json.data : [])))

// 1) 收集所有 workspace uid（便于后续遍历/调试）
def allUids = new LinkedHashSet()
workspaces.each { w -&gt;
    def uid = (w.uid ?: w.id ?: w.workspace_uid ?: w.workspaceId)
    if (uid) allUids.add(uid.toString())
}
// 写入 ForEach 可用的变量序列：workspace_uids_1..N
vars.put(&apos;workspace_uids_matchNr&apos;, allUids.size().toString())
int i = 1
allUids.each { uid -&gt; vars.put(&quot;workspace_uids_${i++}&quot;, uid) }
// 同时写成属性（逗号串），便于在任意地方 `${__property(workspace_uids_csv)}`
props.put(&apos;workspace_uids_csv&apos;, allUids.join(&apos;,&apos;))

// 2) 只挑 name == &quot;Xubin_test&quot; 的 workspace，取其 uid
def found = workspaces.find { w -&gt;
    def name = (w.name ?: w.workspace_name ?: w.title ?: w[&apos;Name&apos;])
    name?.toString() == TARGET_NAME
}

def targetUid = found ? (found.uid ?: found.id ?: found.workspace_uid ?: found.workspaceId)?.toString() : null

if (targetUid) {
    // 变量：当前线程可见
    vars.put(&apos;workspace_uid&apos;, targetUid)
    // 属性：跨线程组可见
    props.put(&apos;workspace_uid&apos;, targetUid)
    log.info(&quot;workspace &apos;${TARGET_NAME}&apos; uid = ${targetUid}&quot;)
} else {
    // 没找到目标名时，清空以避免误用旧值
    vars.remove(&apos;workspace_uid&apos;)
    props.remove(&apos;workspace_uid&apos;)
    log.warn(&quot;workspace &apos;${TARGET_NAME}&apos; not found. Available names: &quot; + workspaces.collect{ it.name })
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /project uid">
          <stringProp name="HTTPSampler.path">/projects</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="workspace_uid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${__property(workspace_uid)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">workspace_uid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.nio.file.*
import java.nio.charset.StandardCharsets

// 1) 解析响应（假设服务直接返回项目数组）
List items = (new JsonSlurper().parse(prev.getResponseData())) as List
log.info(&quot;[projects] size = ${items.size()}&quot;)

// 2) model_type -&gt; 测试六大类
final Map&lt;String,String&gt; type2section = [
  &apos;segmentation&apos;           : &apos;InstanceSeg&apos;,
  &apos;semantic_segmentation&apos;  : &apos;SupervisedSeg&apos;,
  &apos;detection&apos;              : &apos;ObjectDet&apos;,
  &apos;keypoint&apos;               : &apos;Keypoints&apos;,
  &apos;ocr&apos;                    : &apos;OCR&apos;,
  &apos;classification&apos;         : &apos;Classification&apos;
]

// 初始化分桶
def buckets = [
  &apos;SupervisedSeg&apos;  : new LinkedHashSet&lt;String&gt;(),
  &apos;InstanceSeg&apos;    : new LinkedHashSet&lt;String&gt;(),
  &apos;ObjectDet&apos;      : new LinkedHashSet&lt;String&gt;(),
  &apos;Keypoints&apos;      : new LinkedHashSet&lt;String&gt;(),
  &apos;OCR&apos;            : new LinkedHashSet&lt;String&gt;(),
  &apos;Classification&apos; : new LinkedHashSet&lt;String&gt;(),
  &apos;Unknown&apos;        : new LinkedHashSet&lt;String&gt;()
]

// 归类
items.each { Map p -&gt;
  def uid = (p.uid ?: p.id)?.toString()
  def mt  = (p.model_type ?: p.meta?.model_type)?.toString()
  if (!uid) return
  def sec = type2section.get(mt, &apos;Unknown&apos;)
  buckets[sec].add(uid)
}

log.info(&quot;[projects] bucket sizes = &quot; + buckets.collectEntries{ k,v -&gt; [k, v.size()] })

// 3) 导出到 vars / props（ForEach 可用）
buckets.each { sec, set -&gt;
  def list = new ArrayList(set)
  // 线程内对象/计数/索引
  vars.putObject(&quot;project_uids_${sec}&quot;, list)
  vars.put(&quot;project_uids_${sec}_matchNr&quot;, list.size().toString())
  for (int i=0; i&lt;list.size(); i++) {
    vars.put(&quot;project_uids_${sec}_&quot; + (i+1), list.get(i))
  }
  // 全局字符串
  props.put(&quot;project_uids_${sec}_json&quot;, JsonOutput.toJson(list))
  props.put(&quot;project_uids_${sec}_csv&quot;,  list.join(&apos;,&apos;))
}

// 4) 落盘（三个文件）
def cfg = vars.get(&apos;config_path&apos;)
if (!cfg) throw new IllegalStateException(&quot;config_path is empty (set in UDV)&quot;)

def base = Paths.get(cfg).toAbsolutePath().normalize()
def dDisc = base.resolve(&quot;discover&quot;)
def dMap  = base.resolve(&quot;mapping&quot;)
Files.createDirectories(dDisc)
Files.createDirectories(dMap)

// 原始项目列表
Files.write(dDisc.resolve(&quot;projects.json&quot;),
            JsonOutput.prettyPrint(JsonOutput.toJson(items)).getBytes(StandardCharsets.UTF_8))

// CSV: project_uid,section
def sb = new StringBuilder(&quot;project_uid,section\n&quot;)
buckets.each { sec, set -&gt; set.each { uid -&gt; sb.append(uid).append(&quot;,&quot;).append(sec).append(&quot;\n&quot;) } }
Files.write(dMap.resolve(&quot;projects_by_section.csv&quot;), sb.toString().getBytes(StandardCharsets.UTF_8))

// JSON: {Section: [uids]}
def jsonMap = buckets.collectEntries { k,v -&gt; [(k): v as List] }
Files.write(dMap.resolve(&quot;projects_by_section.json&quot;),
            JsonOutput.prettyPrint(JsonOutput.toJson(jsonMap)).getBytes(StandardCharsets.UTF_8))

log.info(&quot;saved -&gt; ${dDisc.resolve(&quot;projects.json&quot;)}&quot;)
log.info(&quot;saved -&gt; ${dMap.resolve(&quot;projects_by_section.csv&quot;)}&quot;)
log.info(&quot;saved -&gt; ${dMap.resolve(&quot;projects_by_section.json&quot;)}&quot;)
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="List trained models (for cleanup)"/>
        <hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE InstanceSeg">
            <stringProp name="ForeachController.inputVal">project_uids_InstanceSeg</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE ObjectDet">
            <stringProp name="ForeachController.inputVal">project_uids_ObjectDet</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE Keypoints">
            <stringProp name="ForeachController.inputVal">project_uids_Keypoints</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE OCR">
            <stringProp name="ForeachController.inputVal">project_uids_OCR</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE SupervisedSeg">
            <stringProp name="ForeachController.inputVal">project_uids_SupervisedSeg</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE Classification">
            <stringProp name="ForeachController.inputVal">project_uids_Classification</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="batch" elementType="Argument">
              <stringProp name="Argument.name">batch</stringProp>
              <stringProp name="Argument.value">${__time(yyyyMMdd-HHmmss)}-${__UUID()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="InstanceSeg" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">24</stringProp>
        <stringProp name="RampUp">5</stringProp>
        <stringProp name="Steps">6</stringProp>
        <stringProp name="Hold">300</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <boolProp name="same_user_on_next_iteration">true</boolProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">C:/Users/daoai/Desktop/dw_pressure_test/instanceseg.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dataset_uid,project_uid,mode,param_profile,param_file,task_type </stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs" enabled="true">
          <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${payload}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.nio.file.Files
import java.nio.charset.StandardCharsets

// --- CSV 字段 ---
String base     = vars.get(&apos;config_path&apos;)            // e.g. C:\Users\daoai\Desktop\dw_pressure_test
String rel      = vars.get(&apos;param_file&apos;)             // e.g. params\objectdet_small.json
String mode     = vars.get(&apos;mode&apos;)                   // 13种之一（按模型子集）
String profile  = vars.get(&apos;param_profile&apos;)          // small / large
String taskType = vars.get(&apos;task_type&apos;)              // ObjectDet / InstanceSeg / ...

// --- 解析参数文件路径 ---
java.io.File pf = new java.io.File(rel)
if (!pf.isAbsolute()) pf = new java.io.File(base, rel)
pf = pf.getCanonicalFile()
if (!pf.exists()) throw new FileNotFoundException(&quot;Param JSON not found: &quot; + pf)

// --- 读取 JSON 模板 ---
String body = new String(Files.readAllBytes(pf.toPath()), StandardCharsets.UTF_8)

// --- project_uid 占位符替换（你的模板里通常是 &quot;${uid}&quot;）---
body = body.replace(&apos;${uid}&apos;, vars.get(&apos;project_uid&apos;))

// --- 覆盖或注入 `&quot;model_type&quot;` 为 CSV 的 `mode` 值 ---
// 1) 如果已有该字段，则直接替换其值
if (body =~ /&quot;model_type&quot;\s*:\s*&quot;.*?&quot;/) {
    body = body.replaceFirst(/&quot;model_type&quot;\s*:\s*&quot;.*?&quot;/, &quot;\&quot;model_type\&quot;:\&quot;${mode}\&quot;&quot;)
} else {
    // 2) 模板里没有：在 JSON 最前面插入一个字段（简单安全）
    body = body.replaceFirst(/\{\s*/, &quot;{ \&quot;model_type\&quot;:\&quot;${mode}\&quot;, &quot;)
}

// --- name 唯一化（带上批次/任务/数据集/模式/参数表）---
String name = &quot;[${vars.get(&apos;batch&apos;)}] ${taskType}-${vars.get(&apos;dataset_uid&apos;)}-${mode}-${profile}&quot;
if (body =~ /&quot;name&quot;\s*:\s*&quot;.*?&quot;/) {
    body = body.replaceFirst(/&quot;name&quot;\s*:\s*&quot;.*?&quot;/, &quot;\&quot;name\&quot;:\&quot;${name}\&quot;&quot;)
} else {
    body = body.replaceFirst(/\{\s*/, &quot;{ \&quot;name\&quot;:\&quot;${name}\&quot;, &quot;)
}

// --- 输出到变量，供 HTTP Sampler 使用 ---
vars.put(&apos;payload&apos;, body)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">trained_model_uid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.trained_model.uid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller">
          <stringProp name="WhileController.condition">${__javaScript(${pollCount}&lt;60,)}</stringProp>
        </WhileController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
            <stringProp name="HTTPSampler.path">/trained-models/${trained_model_uid}/metrics</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="epoch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">epoch</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def c = vars.get(&apos;pollCount&apos;) ?: &apos;0&apos;
vars.put(&apos;pollCount&apos;, (c as int + 1).toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
