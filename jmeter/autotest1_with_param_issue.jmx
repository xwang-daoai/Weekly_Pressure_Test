<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="config_path" elementType="Argument">
            <stringProp name="Argument.name">config_path</stringProp>
            <stringProp name="Argument.value">C:\Users\daoai\Desktop\dw_pressure_test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="split.train.pct" elementType="Argument">
            <stringProp name="Argument.name">split.train.pct</stringProp>
            <stringProp name="Argument.value">70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="split.val.pct" elementType="Argument">
            <stringProp name="Argument.name">split.val.pct</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="split.test.pct" elementType="Argument">
            <stringProp name="Argument.name">split.test.pct</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Login and Model Cleanning">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login request and get token" enabled="true">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/auth/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">autotest1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">robotics</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

def body = prev.getResponseData()       // byte[]
def json = new JsonSlurper().parse(body)

def t = json.token ?: json.access_token ?: (json.data ? json.data.token : null)
if (t) {
    // 同时写入变量和属性（变量给本线程调试用，属性跨线程组可见）
    vars.put(&apos;token&apos;, t)
    props.put(&apos;token&apos;, t)
    log.info(&apos;saved token len=&apos; + t.length())
} else {
    log.error(&apos;Login did not return a token, response=&apos; + prev.getResponseDataAsString())
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /workspaces uid" enabled="true">
          <stringProp name="HTTPSampler.path">/workspaces</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

final String TARGET_NAME = &apos;Xubin_test&apos;

// 解析响应（你的响应是顶层数组）
def json = new JsonSlurper().parse(prev.getResponseData())
// 允许后端有时返回对象包一层
List workspaces = (json instanceof List) ? json
                  : (json?.items instanceof List ? json.items
                  : (json?.workspaces instanceof List ? json.workspaces
                  : (json?.data instanceof List ? json.data : [])))

// 1) 收集所有 workspace uid（便于后续遍历/调试）
def allUids = new LinkedHashSet()
workspaces.each { w -&gt;
    def uid = (w.uid ?: w.id ?: w.workspace_uid ?: w.workspaceId)
    if (uid) allUids.add(uid.toString())
}
// 写入 ForEach 可用的变量序列：workspace_uids_1..N
vars.put(&apos;workspace_uids_matchNr&apos;, allUids.size().toString())
int i = 1
allUids.each { uid -&gt; vars.put(&quot;workspace_uids_${i++}&quot;, uid) }
// 同时写成属性（逗号串），便于在任意地方 `${__property(workspace_uids_csv)}`
props.put(&apos;workspace_uids_csv&apos;, allUids.join(&apos;,&apos;))

// 2) 只挑 name == &quot;Xubin_test&quot; 的 workspace，取其 uid
def found = workspaces.find { w -&gt;
    def name = (w.name ?: w.workspace_name ?: w.title ?: w[&apos;Name&apos;])
    name?.toString() == TARGET_NAME
}

def targetUid = found ? (found.uid ?: found.id ?: found.workspace_uid ?: found.workspaceId)?.toString() : null

if (targetUid) {
    // 变量：当前线程可见
    vars.put(&apos;workspace_uid&apos;, targetUid)
    // 属性：跨线程组可见
    props.put(&apos;workspace_uid&apos;, targetUid)
    log.info(&quot;workspace &apos;${TARGET_NAME}&apos; uid = ${targetUid}&quot;)
} else {
    // 没找到目标名时，清空以避免误用旧值
    vars.remove(&apos;workspace_uid&apos;)
    props.remove(&apos;workspace_uid&apos;)
    log.warn(&quot;workspace &apos;${TARGET_NAME}&apos; not found. Available names: &quot; + workspaces.collect{ it.name })
}
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /project uid">
          <stringProp name="HTTPSampler.path">/projects</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="workspace_uid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${__property(workspace_uid)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">workspace_uid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.nio.file.*
import java.nio.charset.StandardCharsets

// 1) 解析响应（假设服务直接返回项目数组）
List items = (new JsonSlurper().parse(prev.getResponseData())) as List
log.info(&quot;[projects] size = ${items.size()}&quot;)

// 2) model_type -&gt; 测试六大类
final Map&lt;String,String&gt; type2section = [
  &apos;segmentation&apos;           : &apos;InstanceSeg&apos;,
  &apos;semantic_segmentation&apos;  : &apos;SupervisedSeg&apos;,
  &apos;detection&apos;              : &apos;ObjectDet&apos;,
  &apos;keypoint&apos;               : &apos;Keypoints&apos;,
  &apos;ocr&apos;                    : &apos;OCR&apos;,
  &apos;classification&apos;         : &apos;Classification&apos;
]

// 初始化分桶
def buckets = [
  &apos;SupervisedSeg&apos;  : new LinkedHashSet&lt;String&gt;(),
  &apos;InstanceSeg&apos;    : new LinkedHashSet&lt;String&gt;(),
  &apos;ObjectDet&apos;      : new LinkedHashSet&lt;String&gt;(),
  &apos;Keypoints&apos;      : new LinkedHashSet&lt;String&gt;(),
  &apos;OCR&apos;            : new LinkedHashSet&lt;String&gt;(),
  &apos;Classification&apos; : new LinkedHashSet&lt;String&gt;(),
  &apos;Unknown&apos;        : new LinkedHashSet&lt;String&gt;()
]

// === 新增：收集 image_count 映射（uid -&gt; count）及分 section 的 count 表
def imgMap = new LinkedHashMap&lt;String, Integer&gt;()
def imgBySection = new LinkedHashMap&lt;String, Map&lt;String, Integer&gt;&gt;()

// 归类
items.each { Map p -&gt;
  def uid = (p.uid ?: p.id)?.toString()
  def mt  = (p.model_type ?: p.meta?.model_type)?.toString()
  if (!uid) return
  def sec = type2section.get(mt, &apos;Unknown&apos;)
  buckets[sec].add(uid)

  // === 新增：记录 image_count
  def cnt = (p?.image_count ?: 0) as int
  props.put(&quot;image_count.${uid}&quot;, String.valueOf(cnt))  // 跨线程可见
  imgMap[uid] = cnt

  if (!imgBySection.containsKey(sec)) imgBySection[sec] = new LinkedHashMap&lt;String, Integer&gt;()
  imgBySection[sec][uid] = cnt
}

log.info(&quot;[projects] bucket sizes = &quot; + buckets.collectEntries{ k,v -&gt; [k, v.size()] })
log.info(&quot;[projects] image_count collected for ${imgMap.size()} projects&quot;)

// 3) 导出到 vars / props（ForEach 可用）
buckets.each { sec, set -&gt;
  def list = new ArrayList(set)
  // 线程内对象/计数/索引
  vars.putObject(&quot;project_uids_${sec}&quot;, list)
  vars.put(&quot;project_uids_${sec}_matchNr&quot;, list.size().toString())
  for (int i=0; i&lt;list.size(); i++) {
    vars.put(&quot;project_uids_${sec}_&quot; + (i+1), list.get(i))
  }
  // props（跨线程可见）— 关键：编号形式 + 计数
  props.put(&quot;project_uids_${sec}_matchNr&quot;, list.size().toString())
  for (int i=0; i&lt;list.size(); i++) {
    props.put(&quot;project_uids_${sec}_&quot; + (i+1), list.get(i))
  }
  // 全局字符串
  props.put(&quot;project_uids_${sec}_json&quot;, JsonOutput.toJson(list))
  props.put(&quot;project_uids_${sec}_csv&quot;,  list.join(&apos;,&apos;))
}

// === 新增：把整表 image_count 也放到 props，便于调试或在其他地方整体读取
props.put(&quot;image_count.map.json&quot;, JsonOutput.toJson(imgMap))

// 4) 落盘（三个文件）
def cfg = vars.get(&apos;config_path&apos;)
if (!cfg) throw new IllegalStateException(&quot;config_path is empty (set in UDV)&quot;)

def base = Paths.get(cfg).toAbsolutePath().normalize()
def dDisc = base.resolve(&quot;discover&quot;)
def dMap  = base.resolve(&quot;mapping&quot;)
Files.createDirectories(dDisc)
Files.createDirectories(dMap)

// 原始项目列表
Files.write(dDisc.resolve(&quot;projects.json&quot;),
            JsonOutput.prettyPrint(JsonOutput.toJson(items)).getBytes(StandardCharsets.UTF_8))

// CSV: project_uid,section
def sb = new StringBuilder(&quot;project_uid,section\n&quot;)
buckets.each { sec, set -&gt; set.each { uid -&gt; sb.append(uid).append(&quot;,&quot;).append(sec).append(&quot;\n&quot;) } }
Files.write(dMap.resolve(&quot;projects_by_section.csv&quot;), sb.toString().getBytes(StandardCharsets.UTF_8))

// JSON: {Section: [uids]}
def jsonMap = buckets.collectEntries { k,v -&gt; [(k): v as List] }
Files.write(dMap.resolve(&quot;projects_by_section.json&quot;),
            JsonOutput.prettyPrint(JsonOutput.toJson(jsonMap)).getBytes(StandardCharsets.UTF_8))


// === 新增：落盘 image_count 映射（uid-&gt;count）
Files.write(
  dMap.resolve(&quot;project_image_counts.json&quot;),
  JsonOutput.prettyPrint(JsonOutput.toJson(imgMap)).getBytes(StandardCharsets.UTF_8)
)

// === 新增：落盘 image_count 的 CSV（project_uid,image_count）
def sb2 = new StringBuilder(&quot;project_uid,image_count\n&quot;)
imgMap.each { uid, cnt -&gt; sb2.append(uid).append(&quot;,&quot;).append(cnt).append(&quot;\n&quot;) }
Files.write(
  dMap.resolve(&quot;project_image_counts.csv&quot;),
  sb2.toString().getBytes(StandardCharsets.UTF_8)
)

// （可选）按 section 输出一份 JSON，便于肉眼核对
Files.write(
  dMap.resolve(&quot;project_image_counts_by_section.json&quot;),
  JsonOutput.prettyPrint(JsonOutput.toJson(imgBySection)).getBytes(StandardCharsets.UTF_8)
)

log.info(&quot;saved -&gt; ${dDisc.resolve(&quot;projects.json&quot;)}&quot;)
log.info(&quot;saved -&gt; ${dMap.resolve(&quot;projects_by_section.csv&quot;)}&quot;)
log.info(&quot;saved -&gt; ${dMap.resolve(&quot;projects_by_section.json&quot;)}&quot;)
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="List trained models (for cleanup)"/>
        <hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE InstanceSeg">
            <stringProp name="ForeachController.inputVal">project_uids_InstanceSeg</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs" enabled="true">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)" enabled="true">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model" enabled="true">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter" enabled="true">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE ObjectDet">
            <stringProp name="ForeachController.inputVal">project_uids_ObjectDet</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)" enabled="true">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model" enabled="true">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter" enabled="true">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE Keypoints">
            <stringProp name="ForeachController.inputVal">project_uids_Keypoints</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs" enabled="true">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)" enabled="true">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model" enabled="true">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter" enabled="true">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE OCR">
            <stringProp name="ForeachController.inputVal">project_uids_OCR</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs" enabled="true">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)" enabled="true">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model" enabled="true">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter" enabled="true">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE SupervisedSeg" enabled="true">
            <stringProp name="ForeachController.inputVal">project_uids_SupervisedSeg</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs" enabled="true">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)" enabled="true">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model" enabled="true">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter" enabled="true">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE Classification" enabled="true">
            <stringProp name="ForeachController.inputVal">project_uids_Classification</stringProp>
            <stringProp name="ForeachController.returnVal">project_uid</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET trained-jobs" enabled="true">
              <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="project_uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${project_uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">project_uid</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JMESPath" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tj_uid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[*].uid </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// 打日志看一下
log.info(&quot;tj_uid_matchNr=&quot; + vars.get(&quot;tj_uid_matchNr&quot;));
log.info(&quot;tj_uid_ALL=&quot; + vars.get(&quot;tj_uid_ALL&quot;));

// 给 ForEach 一个可读输出名列表的总数，非必需，但利于排错
def n = (vars.get(&quot;tj_uid_matchNr&quot;) ?: &quot;0&quot;) as int;
vars.put(&quot;tj_count&quot;, String.valueOf(n));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check training jobs" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE job uids (this project)" enabled="true">
              <stringProp name="ForeachController.inputVal">tj_uid_</stringProp>
              <stringProp name="ForeachController.returnVal">current_tj_uid</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="check current id" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy( (vars.get(&apos;current_tj_uid&apos;) ?: &apos;&apos;) != &apos;&apos;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE trained-model" enabled="true">
                  <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/training-jobs/${current_tj_uid}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="code 200 or 204" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1447184276">200|204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                </ResponseAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="jitter" enabled="true">
                  <stringProp name="ConstantTimer.delay">50</stringProp>
                  <stringProp name="RandomTimer.range">150</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="batch" elementType="Argument">
              <stringProp name="Argument.name">batch</stringProp>
              <stringProp name="Argument.value">${__time(yyyyMMdd-HHmmss)}-${__UUID()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IS – Create training jobs" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// section 要和你的 ForEach 一致
def section = &apos;InstanceSeg&apos;  // 你也可以做成 UDV: ${section}

// 取出全局属性里准备好的列表（CSV / JSON 二选一，看你前面产出了哪个）
def csv = props.get(&quot;project_uids_${section}_csv&quot;)     // 例如 &quot;a,b,c&quot;
def list = csv ? csv.split(&apos;,&apos;) as List : []

// 把列表灌进“变量”空间（ForEach 就能看见了）
vars.put(&quot;project_uids_${section}_matchNr&quot;, list.size().toString())
for (int i = 0; i &lt; list.size(); i++) {
    vars.put(&quot;project_uids_${section}_&quot; + (i + 1), list[i])
}

// 可选：便于排错
log.info(&quot;Hydrated vars for ${section}: size=&quot; + list.size() +
         &quot;, first=&quot; + (list ? list[0] : &apos;N/A&apos;))
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE projects (InstanceSeg)">
          <stringProp name="ForeachController.inputVal">project_uids_InstanceSeg</stringProp>
          <stringProp name="ForeachController.returnVal">current_proj_uid</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def modes = [&apos;super_fast&apos;,&apos;fast&apos;,&apos;accurate&apos;,&apos;rotated_accurate&apos;]
modes.eachWithIndex{ m,i -&gt; vars.put(&apos;mode_&apos; + (i+1), m) }
vars.put(&apos;mode_matchNr&apos;, String.valueOf(modes.size()))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE modes" enabled="true">
            <stringProp name="ForeachController.inputVal">mode</stringProp>
            <stringProp name="ForeachController.returnVal">current_mode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">[&apos;resize&apos;,&apos;slice&apos;].eachWithIndex{ p,i -&gt; vars.put(&apos;pp_&apos; + (i+1), p) }
vars.put(&apos;pp_matchNr&apos;, &apos;2&apos;)

</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE preprocess" enabled="true">
              <stringProp name="ForeachController.inputVal">pp</stringProp>
              <stringProp name="ForeachController.returnVal">current_preprocess</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">[&apos;large&apos;,&apos;small&apos;].eachWithIndex{ a,i -&gt; vars.put(&apos;aug_&apos; + (i+1), a) }
vars.put(&apos;aug_matchNr&apos;, &apos;2&apos;)

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE aug" enabled="true">
                <stringProp name="ForeachController.inputVal">aug</stringProp>
                <stringProp name="ForeachController.returnVal">current_aug</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs" enabled="true">
                  <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${payload}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Language: groovy
import groovy.json.*

// 取循环变量
final String proj       = vars.get(&apos;current_proj_uid&apos;)
final String mode       = (vars.get(&apos;current_mode&apos;) ?: &apos;super_fast&apos;)
final String preprocess = (vars.get(&apos;current_preprocess&apos;) ?: &apos;resize&apos;)   // &apos;resize&apos; or &apos;slice&apos;
final String aug        = (vars.get(&apos;current_aug&apos;) ?: &apos;large&apos;)           // &apos;large&apos; or &apos;small&apos;

// 载入参数模板：large/small
final String cfgRoot = vars.get(&apos;config_path&apos;)
def tplFile = new File(cfgRoot + File.separator + &apos;params&apos; + File.separator + (aug == &apos;large&apos; ? &apos;large.json&apos; : &apos;small.json&apos;))

def slurper = new JsonSlurper()
def payload = slurper.parse(tplFile) as Map

// --- 确保 training_job_create 存在 ---
if (!(payload.training_job_create instanceof Map)) {
    payload.training_job_create = [:]
}
def tj = payload.training_job_create as Map

// --- 确保 preprocessing_steps 容器存在 ---
if (!(tj.preprocessing_steps instanceof Map)) {
    tj.preprocessing_steps = [:]
}
def pp = tj.preprocessing_steps as Map

// 你给的两套「HIRES_SLICE」默认（这里示例用“大”参数；如需“小”参数可按 aug 或单独开关区分）
def RESIZE_DEFAULT = [ ENABLE:true, MAX_EDGE:1024 ]
def SLICE_DEFAULT_LARGE = [ ENABLE:true, SLICE_ROW:4, SLICE_COL:7, OVERLAP_RATIO:0.5, RESIZE_AFTER_SLICE:1024 ]
def SLICE_DEFAULT_SMALL = [ ENABLE:true, SLICE_ROW:2, SLICE_COL:2, OVERLAP_RATIO:0,   RESIZE_AFTER_SLICE:224 ]

// 根据 preprocess 选择并保证“二选一”
if (preprocess == &apos;resize&apos;) {
    pp.RESIZE = RESIZE_DEFAULT
    pp.remove(&apos;HIRES_SLICE&apos;)
} else { // slice
    pp.HIRES_SLICE = (aug == &apos;small&apos;) ? SLICE_DEFAULT_SMALL : SLICE_DEFAULT_LARGE
    pp.remove(&apos;RESIZE&apos;)
}

// 写入 model_type（注意：写在 training_job_create 里）
tj.model_type = mode

// 方便排查：改一个可读的 name（也在 training_job_create 里）
def stamp = new Date().format(&quot;yyMMdd-HHmmss&quot;)
tj.name = &quot;JM-IS ${mode}-${preprocess}-${aug} ${stamp}&quot;

// 顶层 project_uid（如果你的接口 body 需要）
payload.project_uid = proj

// 输出到变量，供 HTTP Sampler 的 Body Data 使用： ${payload}
def json = JsonOutput.prettyPrint(JsonOutput.toJson(payload))
vars.put(&apos;payload&apos;, json)

// —— 调试日志 —— 
log.info(&quot;[JM-PAYLOAD] proj=${proj}, mode=${mode}, preprocess=${preprocess}, aug=${aug}&quot;)
log.info(&quot;[JM-PAYLOAD] name=${tj.name}&quot;)
log.debug(json)
</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <url>true</url>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SS – Create training jobs" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// section 要和你的 ForEach 一致
def section = &apos;SupervisedSeg&apos;  // 你也可以做成 UDV: ${section}

// 取出全局属性里准备好的列表（CSV / JSON 二选一，看你前面产出了哪个）
def csv = props.get(&quot;project_uids_${section}_csv&quot;)     // 例如 &quot;a,b,c&quot;
def list = csv ? csv.split(&apos;,&apos;) as List : []

// 把列表灌进“变量”空间（ForEach 就能看见了）
vars.put(&quot;project_uids_${section}_matchNr&quot;, list.size().toString())
for (int i = 0; i &lt; list.size(); i++) {
    vars.put(&quot;project_uids_${section}_&quot; + (i + 1), list[i])
}

// 可选：便于排错
log.info(&quot;Hydrated vars for ${section}: size=&quot; + list.size() +
         &quot;, first=&quot; + (list ? list[0] : &apos;N/A&apos;))
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE projects (SupervisedSeg)" enabled="true">
          <stringProp name="ForeachController.inputVal">project_uids_SupervisedSeg</stringProp>
          <stringProp name="ForeachController.returnVal">current_proj_uid</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def modes = [&apos;fast&apos;,&apos;accurate&apos;,&apos;super_high_resolution&apos;]
modes.eachWithIndex{ m,i -&gt; vars.put(&apos;mode_&apos; + (i+1), m) }
vars.put(&apos;mode_matchNr&apos;, String.valueOf(modes.size()))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE modes" enabled="true">
            <stringProp name="ForeachController.inputVal">mode</stringProp>
            <stringProp name="ForeachController.returnVal">current_mode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">[&apos;resize&apos;,&apos;slice&apos;].eachWithIndex{ p,i -&gt; vars.put(&apos;pp_&apos; + (i+1), p) }
vars.put(&apos;pp_matchNr&apos;, &apos;2&apos;)

</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE preprocess" enabled="true">
              <stringProp name="ForeachController.inputVal">pp</stringProp>
              <stringProp name="ForeachController.returnVal">current_preprocess</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">[&apos;large&apos;,&apos;small&apos;].eachWithIndex{ a,i -&gt; vars.put(&apos;aug_&apos; + (i+1), a) }
vars.put(&apos;aug_matchNr&apos;, &apos;2&apos;)

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE aug" enabled="true">
                <stringProp name="ForeachController.inputVal">aug</stringProp>
                <stringProp name="ForeachController.returnVal">current_aug</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs" enabled="true">
                  <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${payload}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Language: groovy
import groovy.json.*

// 取循环变量
final String proj       = vars.get(&apos;current_proj_uid&apos;)
final String mode       = (vars.get(&apos;current_mode&apos;) ?: &apos;super_fast&apos;)
final String preprocess = (vars.get(&apos;current_preprocess&apos;) ?: &apos;resize&apos;)   // &apos;resize&apos; or &apos;slice&apos;
final String aug        = (vars.get(&apos;current_aug&apos;) ?: &apos;large&apos;)           // &apos;large&apos; or &apos;small&apos;

// 载入参数模板：large/small
final String cfgRoot = vars.get(&apos;config_path&apos;)
def tplFile = new File(cfgRoot + File.separator + &apos;params&apos; + File.separator + (aug == &apos;large&apos; ? &apos;large.json&apos; : &apos;small.json&apos;))

def slurper = new JsonSlurper()
def payload = slurper.parse(tplFile) as Map

// --- 确保 training_job_create 存在 ---
if (!(payload.training_job_create instanceof Map)) {
    payload.training_job_create = [:]
}
def tj = payload.training_job_create as Map

// --- 确保 preprocessing_steps 容器存在 ---
if (!(tj.preprocessing_steps instanceof Map)) {
    tj.preprocessing_steps = [:]
}
def pp = tj.preprocessing_steps as Map

// 你给的两套「HIRES_SLICE」默认（这里示例用“大”参数；如需“小”参数可按 aug 或单独开关区分）
def RESIZE_DEFAULT = [ ENABLE:true, MAX_EDGE:1024 ]
def SLICE_DEFAULT_LARGE = [ ENABLE:true, SLICE_ROW:4, SLICE_COL:7, OVERLAP_RATIO:0.5, RESIZE_AFTER_SLICE:1024 ]
def SLICE_DEFAULT_SMALL = [ ENABLE:true, SLICE_ROW:2, SLICE_COL:2, OVERLAP_RATIO:0,   RESIZE_AFTER_SLICE:224 ]

// 根据 preprocess 选择并保证“二选一”
if (preprocess == &apos;resize&apos;) {
    pp.RESIZE = RESIZE_DEFAULT
    pp.remove(&apos;HIRES_SLICE&apos;)
} else { // slice
    pp.HIRES_SLICE = (aug == &apos;small&apos;) ? SLICE_DEFAULT_SMALL : SLICE_DEFAULT_LARGE
    pp.remove(&apos;RESIZE&apos;)
}

// 写入 model_type（注意：写在 training_job_create 里）
tj.model_type = mode

// 方便排查：改一个可读的 name（也在 training_job_create 里）
def stamp = new Date().format(&quot;yyMMdd-HHmmss&quot;)
tj.name = &quot;JM-IS ${mode}-${preprocess}-${aug} ${stamp}&quot;

// 顶层 project_uid（如果你的接口 body 需要）
payload.project_uid = proj

// 输出到变量，供 HTTP Sampler 的 Body Data 使用： ${payload}
def json = JsonOutput.prettyPrint(JsonOutput.toJson(payload))
vars.put(&apos;payload&apos;, json)

// —— 调试日志 —— 
log.info(&quot;[JM-PAYLOAD] proj=${proj}, mode=${mode}, preprocess=${preprocess}, aug=${aug}&quot;)
log.info(&quot;[JM-PAYLOAD] name=${tj.name}&quot;)
log.debug(json)
</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <url>true</url>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OD – Create training jobs" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// section 要和你的 ForEach 一致
def section = &apos;ObjectDet&apos;  // 你也可以做成 UDV: ${section}

// 取出全局属性里准备好的列表（CSV / JSON 二选一，看你前面产出了哪个）
def csv = props.get(&quot;project_uids_${section}_csv&quot;)     // 例如 &quot;a,b,c&quot;
def list = csv ? csv.split(&apos;,&apos;) as List : []

// 把列表灌进“变量”空间（ForEach 就能看见了）
vars.put(&quot;project_uids_${section}_matchNr&quot;, list.size().toString())
for (int i = 0; i &lt; list.size(); i++) {
    vars.put(&quot;project_uids_${section}_&quot; + (i + 1), list[i])
}

// 可选：便于排错
log.info(&quot;Hydrated vars for ${section}: size=&quot; + list.size() +
         &quot;, first=&quot; + (list ? list[0] : &apos;N/A&apos;))
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE projects (ObjectDet)" enabled="true">
          <stringProp name="ForeachController.inputVal">project_uids_ObjectDet</stringProp>
          <stringProp name="ForeachController.returnVal">current_proj_uid</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def modes = [&apos;super_fast&apos;,&apos;fast&apos;,&apos;accurate&apos;,&apos;nano&apos;,&apos;small&apos;,&apos;large&apos;,&apos;balanced&apos;]
modes.eachWithIndex{ m,i -&gt; vars.put(&apos;mode_&apos; + (i+1), m) }
vars.put(&apos;mode_matchNr&apos;, String.valueOf(modes.size()))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE modes" enabled="true">
            <stringProp name="ForeachController.inputVal">mode</stringProp>
            <stringProp name="ForeachController.returnVal">current_mode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">[&apos;resize&apos;,&apos;slice&apos;].eachWithIndex{ p,i -&gt; vars.put(&apos;pp_&apos; + (i+1), p) }
vars.put(&apos;pp_matchNr&apos;, &apos;2&apos;)

</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE preprocess" enabled="true">
              <stringProp name="ForeachController.inputVal">pp</stringProp>
              <stringProp name="ForeachController.returnVal">current_preprocess</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">[&apos;large&apos;,&apos;small&apos;].eachWithIndex{ a,i -&gt; vars.put(&apos;aug_&apos; + (i+1), a) }
vars.put(&apos;aug_matchNr&apos;, &apos;2&apos;)

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE aug" enabled="true">
                <stringProp name="ForeachController.inputVal">aug</stringProp>
                <stringProp name="ForeachController.returnVal">current_aug</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs" enabled="true">
                  <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${payload}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Language: groovy
import groovy.json.*

// 取循环变量
final String proj       = vars.get(&apos;current_proj_uid&apos;)
final String mode       = (vars.get(&apos;current_mode&apos;) ?: &apos;super_fast&apos;)
final String preprocess = (vars.get(&apos;current_preprocess&apos;) ?: &apos;resize&apos;)   // &apos;resize&apos; or &apos;slice&apos;
final String aug        = (vars.get(&apos;current_aug&apos;) ?: &apos;large&apos;)           // &apos;large&apos; or &apos;small&apos;

// 载入参数模板：large/small
final String cfgRoot = vars.get(&apos;config_path&apos;)
def tplFile = new File(cfgRoot + File.separator + &apos;params&apos; + File.separator + (aug == &apos;large&apos; ? &apos;large.json&apos; : &apos;small.json&apos;))

def slurper = new JsonSlurper()
def payload = slurper.parse(tplFile) as Map

// --- 确保 training_job_create 存在 ---
if (!(payload.training_job_create instanceof Map)) {
    payload.training_job_create = [:]
}
def tj = payload.training_job_create as Map

// --- 确保 preprocessing_steps 容器存在 ---
if (!(tj.preprocessing_steps instanceof Map)) {
    tj.preprocessing_steps = [:]
}
def pp = tj.preprocessing_steps as Map

// 你给的两套「HIRES_SLICE」默认（这里示例用“大”参数；如需“小”参数可按 aug 或单独开关区分）
def RESIZE_DEFAULT = [ ENABLE:true, MAX_EDGE:1024 ]
def SLICE_DEFAULT_LARGE = [ ENABLE:true, SLICE_ROW:4, SLICE_COL:7, OVERLAP_RATIO:0.5, RESIZE_AFTER_SLICE:1024 ]
def SLICE_DEFAULT_SMALL = [ ENABLE:true, SLICE_ROW:2, SLICE_COL:2, OVERLAP_RATIO:0,   RESIZE_AFTER_SLICE:224 ]

// 根据 preprocess 选择并保证“二选一”
if (preprocess == &apos;resize&apos;) {
    pp.RESIZE = RESIZE_DEFAULT
    pp.remove(&apos;HIRES_SLICE&apos;)
} else { // slice
    pp.HIRES_SLICE = (aug == &apos;small&apos;) ? SLICE_DEFAULT_SMALL : SLICE_DEFAULT_LARGE
    pp.remove(&apos;RESIZE&apos;)
}

// 写入 model_type（注意：写在 training_job_create 里）
tj.model_type = mode

// 方便排查：改一个可读的 name（也在 training_job_create 里）
def stamp = new Date().format(&quot;yyMMdd-HHmmss&quot;)
tj.name = &quot;JM-IS ${mode}-${preprocess}-${aug} ${stamp}&quot;

// 顶层 project_uid（如果你的接口 body 需要）
payload.project_uid = proj

// 输出到变量，供 HTTP Sampler 的 Body Data 使用： ${payload}
def json = JsonOutput.prettyPrint(JsonOutput.toJson(payload))
vars.put(&apos;payload&apos;, json)

// —— 调试日志 —— 
log.info(&quot;[JM-PAYLOAD] proj=${proj}, mode=${mode}, preprocess=${preprocess}, aug=${aug}&quot;)
log.info(&quot;[JM-PAYLOAD] name=${tj.name}&quot;)
log.debug(json)
</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <url>true</url>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CLA – Create training jobs" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// section 要和你的 ForEach 一致
def section = &apos;Classification&apos;  // 你也可以做成 UDV: ${section}

// 取出全局属性里准备好的列表（CSV / JSON 二选一，看你前面产出了哪个）
def csv = props.get(&quot;project_uids_${section}_csv&quot;)     // 例如 &quot;a,b,c&quot;
def list = csv ? csv.split(&apos;,&apos;) as List : []

// 把列表灌进“变量”空间（ForEach 就能看见了）
vars.put(&quot;project_uids_${section}_matchNr&quot;, list.size().toString())
for (int i = 0; i &lt; list.size(); i++) {
    vars.put(&quot;project_uids_${section}_&quot; + (i + 1), list[i])
}

// 可选：便于排错
log.info(&quot;Hydrated vars for ${section}: size=&quot; + list.size() +
         &quot;, first=&quot; + (list ? list[0] : &apos;N/A&apos;))
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE projects (project_uids_Classification)">
          <stringProp name="ForeachController.inputVal">project_uids_Classification</stringProp>
          <stringProp name="ForeachController.returnVal">current_proj_uid</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def modes = [&apos;fast&apos;,&apos;accurate&apos;,&apos;balanced&apos;]
modes.eachWithIndex{ m,i -&gt; vars.put(&apos;mode_&apos; + (i+1), m) }
vars.put(&apos;mode_matchNr&apos;, String.valueOf(modes.size()))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE modes">
            <stringProp name="ForeachController.inputVal">mode</stringProp>
            <stringProp name="ForeachController.returnVal">current_mode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">[&apos;resize&apos;,&apos;slice&apos;].eachWithIndex{ p,i -&gt; vars.put(&apos;pp_&apos; + (i+1), p) }
vars.put(&apos;pp_matchNr&apos;, &apos;2&apos;)

</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE preprocess" enabled="true">
              <stringProp name="ForeachController.inputVal">pp</stringProp>
              <stringProp name="ForeachController.returnVal">current_preprocess</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">[&apos;large&apos;,&apos;small&apos;].eachWithIndex{ a,i -&gt; vars.put(&apos;aug_&apos; + (i+1), a) }
vars.put(&apos;aug_matchNr&apos;, &apos;2&apos;)

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE aug">
                <stringProp name="ForeachController.inputVal">aug</stringProp>
                <stringProp name="ForeachController.returnVal">current_aug</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs">
                  <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${payload}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Language: groovy
import groovy.json.*

// 取循环变量
final String proj       = vars.get(&apos;current_proj_uid&apos;)
final String mode       = (vars.get(&apos;current_mode&apos;) ?: &apos;super_fast&apos;)
final String preprocess = (vars.get(&apos;current_preprocess&apos;) ?: &apos;resize&apos;)   // &apos;resize&apos; or &apos;slice&apos;
final String aug        = (vars.get(&apos;current_aug&apos;) ?: &apos;large&apos;)           // &apos;large&apos; or &apos;small&apos;

// 载入参数模板：large/small
final String cfgRoot = vars.get(&apos;config_path&apos;)
def tplFile = new File(cfgRoot + File.separator + &apos;params&apos; + File.separator + (aug == &apos;large&apos; ? &apos;large.json&apos; : &apos;small.json&apos;))

def slurper = new JsonSlurper()
def payload = slurper.parse(tplFile) as Map

// --- 确保 training_job_create 存在 ---
if (!(payload.training_job_create instanceof Map)) {
    payload.training_job_create = [:]
}
def tj = payload.training_job_create as Map

// --- 确保 preprocessing_steps 容器存在 ---
if (!(tj.preprocessing_steps instanceof Map)) {
    tj.preprocessing_steps = [:]
}
def pp = tj.preprocessing_steps as Map

// 你给的两套「HIRES_SLICE」默认（这里示例用“大”参数；如需“小”参数可按 aug 或单独开关区分）
def RESIZE_DEFAULT = [ ENABLE:true, MAX_EDGE:1024 ]
def SLICE_DEFAULT_LARGE = [ ENABLE:true, SLICE_ROW:4, SLICE_COL:7, OVERLAP_RATIO:0.5, RESIZE_AFTER_SLICE:1024 ]
def SLICE_DEFAULT_SMALL = [ ENABLE:true, SLICE_ROW:2, SLICE_COL:2, OVERLAP_RATIO:0,   RESIZE_AFTER_SLICE:224 ]

// 根据 preprocess 选择并保证“二选一”
if (preprocess == &apos;resize&apos;) {
    pp.RESIZE = RESIZE_DEFAULT
    pp.remove(&apos;HIRES_SLICE&apos;)
} else { // slice
    pp.HIRES_SLICE = (aug == &apos;small&apos;) ? SLICE_DEFAULT_SMALL : SLICE_DEFAULT_LARGE
    pp.remove(&apos;RESIZE&apos;)
}

// 写入 model_type（注意：写在 training_job_create 里）
tj.model_type = mode

// 方便排查：改一个可读的 name（也在 training_job_create 里）
def stamp = new Date().format(&quot;yyMMdd-HHmmss&quot;)
tj.name = &quot;JM-IS ${mode}-${preprocess}-${aug} ${stamp}&quot;

// 顶层 project_uid（如果你的接口 body 需要）
payload.project_uid = proj

// 输出到变量，供 HTTP Sampler 的 Body Data 使用： ${payload}
def json = JsonOutput.prettyPrint(JsonOutput.toJson(payload))
vars.put(&apos;payload&apos;, json)

// —— 调试日志 —— 
log.info(&quot;[JM-PAYLOAD] proj=${proj}, mode=${mode}, preprocess=${preprocess}, aug=${aug}&quot;)
log.info(&quot;[JM-PAYLOAD] name=${tj.name}&quot;)
log.debug(json)
</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <url>true</url>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="KP – Create training jobs" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// section 要和你的 ForEach 一致
def section = &apos;Keypoints&apos;  // 你也可以做成 UDV: ${section}

// 取出全局属性里准备好的列表（CSV / JSON 二选一，看你前面产出了哪个）
def csv = props.get(&quot;project_uids_${section}_csv&quot;)     // 例如 &quot;a,b,c&quot;
def list = csv ? csv.split(&apos;,&apos;) as List : []

// 把列表灌进“变量”空间（ForEach 就能看见了）
vars.put(&quot;project_uids_${section}_matchNr&quot;, list.size().toString())
for (int i = 0; i &lt; list.size(); i++) {
    vars.put(&quot;project_uids_${section}_&quot; + (i + 1), list[i])
}

// 可选：便于排错
log.info(&quot;Hydrated vars for ${section}: size=&quot; + list.size() +
         &quot;, first=&quot; + (list ? list[0] : &apos;N/A&apos;))
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE projects (Keypoints)" enabled="true">
          <stringProp name="ForeachController.inputVal">project_uids_Keypoints</stringProp>
          <stringProp name="ForeachController.returnVal">current_proj_uid</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def modes = [&apos;super_fast&apos;,&apos;fast&apos;,&apos;accurate&apos;,&apos;rotated_accurate&apos;]
modes.eachWithIndex{ m,i -&gt; vars.put(&apos;mode_&apos; + (i+1), m) }
vars.put(&apos;mode_matchNr&apos;, String.valueOf(modes.size()))
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE modes" enabled="true">
            <stringProp name="ForeachController.inputVal">mode</stringProp>
            <stringProp name="ForeachController.returnVal">current_mode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def pp = [&apos;resize&apos;]  // 关键点仅用 resize
vars.put(&apos;pp_matchNr&apos;, String.valueOf(pp.size()))
pp.eachWithIndex { v,i -&gt; vars.put(&quot;pp_${i+1}&quot;, v) }


</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE preprocess" enabled="true">
              <stringProp name="ForeachController.inputVal">pp</stringProp>
              <stringProp name="ForeachController.returnVal">current_preprocess</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">[&apos;large&apos;,&apos;small&apos;].eachWithIndex{ a,i -&gt; vars.put(&apos;aug_&apos; + (i+1), a) }
vars.put(&apos;aug_matchNr&apos;, &apos;2&apos;)

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE aug" enabled="true">
                <stringProp name="ForeachController.inputVal">aug</stringProp>
                <stringProp name="ForeachController.returnVal">current_aug</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs" enabled="true">
                  <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${payload}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Language: groovy
import groovy.json.*

// 取循环变量
final String proj       = vars.get(&apos;current_proj_uid&apos;)
final String mode       = (vars.get(&apos;current_mode&apos;) ?: &apos;super_fast&apos;)
final String preprocess = (vars.get(&apos;current_preprocess&apos;) ?: &apos;resize&apos;)   // &apos;resize&apos; or &apos;slice&apos;
final String aug        = (vars.get(&apos;current_aug&apos;) ?: &apos;large&apos;)           // &apos;large&apos; or &apos;small&apos;

// 载入参数模板：large/small
final String cfgRoot = vars.get(&apos;config_path&apos;)
def tplFile = new File(cfgRoot + File.separator + &apos;params&apos; + File.separator + (aug == &apos;large&apos; ? &apos;large.json&apos; : &apos;small.json&apos;))

def slurper = new JsonSlurper()
def payload = slurper.parse(tplFile) as Map

// --- 确保 training_job_create 存在 ---
if (!(payload.training_job_create instanceof Map)) {
    payload.training_job_create = [:]
}
def tj = payload.training_job_create as Map

// --- 确保 preprocessing_steps 容器存在 ---
if (!(tj.preprocessing_steps instanceof Map)) {
    tj.preprocessing_steps = [:]
}
def pp = tj.preprocessing_steps as Map

// 你给的两套「HIRES_SLICE」默认（这里示例用“大”参数；如需“小”参数可按 aug 或单独开关区分）
def RESIZE_DEFAULT = [ ENABLE:true, MAX_EDGE:1024 ]
def SLICE_DEFAULT_LARGE = [ ENABLE:true, SLICE_ROW:4, SLICE_COL:7, OVERLAP_RATIO:0.5, RESIZE_AFTER_SLICE:1024 ]
def SLICE_DEFAULT_SMALL = [ ENABLE:true, SLICE_ROW:2, SLICE_COL:2, OVERLAP_RATIO:0,   RESIZE_AFTER_SLICE:224 ]

// 根据 preprocess 选择并保证“二选一”
if (preprocess == &apos;resize&apos;) {
    pp.RESIZE = RESIZE_DEFAULT
    pp.remove(&apos;HIRES_SLICE&apos;)
} else { // slice
    pp.HIRES_SLICE = (aug == &apos;small&apos;) ? SLICE_DEFAULT_SMALL : SLICE_DEFAULT_LARGE
    pp.remove(&apos;RESIZE&apos;)
}

// 写入 model_type（注意：写在 training_job_create 里）
tj.model_type = mode

// 方便排查：改一个可读的 name（也在 training_job_create 里）
def stamp = new Date().format(&quot;yyMMdd-HHmmss&quot;)
tj.name = &quot;JM-IS ${mode}-${preprocess}-${aug} ${stamp}&quot;

// 顶层 project_uid（如果你的接口 body 需要）
payload.project_uid = proj

// 输出到变量，供 HTTP Sampler 的 Body Data 使用： ${payload}
def json = JsonOutput.prettyPrint(JsonOutput.toJson(payload))
vars.put(&apos;payload&apos;, json)

// —— 调试日志 —— 
log.info(&quot;[JM-PAYLOAD] proj=${proj}, mode=${mode}, preprocess=${preprocess}, aug=${aug}&quot;)
log.info(&quot;[JM-PAYLOAD] name=${tj.name}&quot;)
log.debug(json)
</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <url>true</url>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OCR – Create training jobs" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <stringProp name="HTTPSampler.domain">api.dev.daoai.ca</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// section 要和你的 ForEach 一致
def section = &apos;OCR&apos;  // 你也可以做成 UDV: ${section}

// 取出全局属性里准备好的列表（CSV / JSON 二选一，看你前面产出了哪个）
def csv = props.get(&quot;project_uids_${section}_csv&quot;)     // 例如 &quot;a,b,c&quot;
def list = csv ? csv.split(&apos;,&apos;) as List : []

// 把列表灌进“变量”空间（ForEach 就能看见了）
vars.put(&quot;project_uids_${section}_matchNr&quot;, list.size().toString())
for (int i = 0; i &lt; list.size(); i++) {
    vars.put(&quot;project_uids_${section}_&quot; + (i + 1), list[i])
}

// 可选：便于排错
log.info(&quot;Hydrated vars for ${section}: size=&quot; + list.size() +
         &quot;, first=&quot; + (list ? list[0] : &apos;N/A&apos;))
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE projects (OCR)" enabled="true">
          <stringProp name="ForeachController.inputVal">project_uids_OCR</stringProp>
          <stringProp name="ForeachController.returnVal">current_proj_uid</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def modes = [&apos;accurate&apos;]
vars.put(&apos;mode_matchNr&apos;, String.valueOf(modes.size()))
modes.eachWithIndex { v,i -&gt; vars.put(&quot;mode_${i+1}&quot;, v) }
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE modes" enabled="true">
            <stringProp name="ForeachController.inputVal">mode</stringProp>
            <stringProp name="ForeachController.returnVal">current_mode</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def pp = [&apos;resize&apos;]  // OCR 仅用 resize
vars.put(&apos;pp_matchNr&apos;, String.valueOf(pp.size()))
pp.eachWithIndex { v,i -&gt; vars.put(&quot;pp_${i+1}&quot;, v) }


</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE preprocess" enabled="true">
              <stringProp name="ForeachController.inputVal">pp</stringProp>
              <stringProp name="ForeachController.returnVal">current_preprocess</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">[&apos;large&apos;,&apos;small&apos;].eachWithIndex{ a,i -&gt; vars.put(&apos;aug_&apos; + (i+1), a) }
vars.put(&apos;aug_matchNr&apos;, &apos;2&apos;)

</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="FE aug" enabled="true">
                <stringProp name="ForeachController.inputVal">aug</stringProp>
                <stringProp name="ForeachController.returnVal">current_aug</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /training-jobs" enabled="true">
                  <stringProp name="HTTPSampler.path">/training-jobs</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${payload}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">// Language: groovy
import groovy.json.*

// 取循环变量
final String proj       = vars.get(&apos;current_proj_uid&apos;)
final String mode       = (vars.get(&apos;current_mode&apos;) ?: &apos;super_fast&apos;)
final String preprocess = (vars.get(&apos;current_preprocess&apos;) ?: &apos;resize&apos;)   // &apos;resize&apos; or &apos;slice&apos;
final String aug        = (vars.get(&apos;current_aug&apos;) ?: &apos;large&apos;)           // &apos;large&apos; or &apos;small&apos;

// 载入参数模板：large/small
final String cfgRoot = vars.get(&apos;config_path&apos;)
def tplFile = new File(cfgRoot + File.separator + &apos;params&apos; + File.separator + (aug == &apos;large&apos; ? &apos;large.json&apos; : &apos;small.json&apos;))

def slurper = new JsonSlurper()
def payload = slurper.parse(tplFile) as Map

// --- 确保 training_job_create 存在 ---
if (!(payload.training_job_create instanceof Map)) {
    payload.training_job_create = [:]
}
def tj = payload.training_job_create as Map

// --- 确保 preprocessing_steps 容器存在 ---
if (!(tj.preprocessing_steps instanceof Map)) {
    tj.preprocessing_steps = [:]
}
def pp = tj.preprocessing_steps as Map

// 你给的两套「HIRES_SLICE」默认（这里示例用“大”参数；如需“小”参数可按 aug 或单独开关区分）
def RESIZE_DEFAULT = [ ENABLE:true, MAX_EDGE:1024 ]
def SLICE_DEFAULT_LARGE = [ ENABLE:true, SLICE_ROW:4, SLICE_COL:7, OVERLAP_RATIO:0.5, RESIZE_AFTER_SLICE:1024 ]
def SLICE_DEFAULT_SMALL = [ ENABLE:true, SLICE_ROW:2, SLICE_COL:2, OVERLAP_RATIO:0,   RESIZE_AFTER_SLICE:224 ]

// 根据 preprocess 选择并保证“二选一”
if (preprocess == &apos;resize&apos;) {
    pp.RESIZE = RESIZE_DEFAULT
    pp.remove(&apos;HIRES_SLICE&apos;)
} else { // slice
    pp.HIRES_SLICE = (aug == &apos;small&apos;) ? SLICE_DEFAULT_SMALL : SLICE_DEFAULT_LARGE
    pp.remove(&apos;RESIZE&apos;)
}

// 写入 model_type（注意：写在 training_job_create 里）
tj.model_type = mode

// 方便排查：改一个可读的 name（也在 training_job_create 里）
def stamp = new Date().format(&quot;yyMMdd-HHmmss&quot;)
tj.name = &quot;JM-IS ${mode}-${preprocess}-${aug} ${stamp}&quot;

// 顶层 project_uid（如果你的接口 body 需要）
payload.project_uid = proj

// 输出到变量，供 HTTP Sampler 的 Body Data 使用： ${payload}
def json = JsonOutput.prettyPrint(JsonOutput.toJson(payload))
vars.put(&apos;payload&apos;, json)

// —— 调试日志 —— 
log.info(&quot;[JM-PAYLOAD] proj=${proj}, mode=${mode}, preprocess=${preprocess}, aug=${aug}&quot;)
log.info(&quot;[JM-PAYLOAD] name=${tj.name}&quot;)
log.debug(json)
</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49587">201</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>true</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <sentBytes>true</sentBytes>
                        <url>true</url>
                        <threadCounts>true</threadCounts>
                        <idleTime>true</idleTime>
                        <connectTime>true</connectTime>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
